require 'test/unit'

def completed_decks_in(cards)
	### Este m√©todo recibe un arreglo de strings y retorna el numero de masos completos que se pueden crear con esas cartas.
	### Un maso completo esta compuesto por cartas del 1 al 13 y hay 4 palos ["S", "H", "D", "C"]

	### ESCRIBIR CODIGO NECESARIO ACA
end


class TestDeck < Test::Unit::TestCase
  def test_deck_1
  	cards = ['4S', '13H', '2S', '6D', '3D', '2H', '10H', '1C', '8C', '1D', '3D', '6C', '6D', '4H', '2H', '10H', '7H', '12H', '10H', '13D', '11C', '3S', '7C', '5C', '5S', '9S', '11H', '6C', '6C', '4H', '10C', '4H', '5C', '6C', '10S', '1D', '11S', '12C', '4C', '11S', '13S', '11D', '4C', '8S', '3C', '1C', '1C', '5D', '10C', '10C', '12S', '5S', '11S', '13H', '3H', '5D', '3H', '4H', '10H', '4D', '2C', '2S', '3C', '4H', '5S', '11H', '1S', '7C', '7S', '6H', '5H', '8H', '7S', '11C', '12C', '4H', '10D', '7C', '12C', '6C', '6C', '12D', '12C', '13H', '10C', '3H', '7S', '9S', '6C', '13C', '5D', '7C', '11S', '7C', '4S', '3C', '2H', '10H', '7D', '6H', '6H', '7H', '12D', '6S', '5C', '3H', '3C', '4S', '8D', '11H', '4H', '11S', '10H', '4D', '12S', '10H', '5C', '8H', '5D', '13S', '2S', '8H', '10S', '6S', '4D', '6C', '4H', '10C', '8S', '2S', '10C', '11C', '5C', '1H', '8C', '6C', '9C', '12H', '13D', '9S', '4D', '11S', '6H', '7S', '13C', '4C', '1H', '4C', '1S', '11H', '7H', '9S', '3D', '10H', '11S', '12S', '1H', '7D', '13H', '8D', '4C', '8H', '4D', '13D', '6S', '3D', '3C', '10H', '2D', '6H', '5H', '5C', '9S', '6H', '1S', '5D', '2S', '6S', '4H', '7S', '6C', '6C', '8S', '8C', '2C', '8D', '13D', '2D', '6H', '1S', '5H', '2S', '3H', '12D', '4C', '7H', '11D', '4S', '11S', '13H', '4D', '8H', '11S', '1C', '11D', '7D', '4C', '13D', '13D', '13S', '2H', '5C', '6S', '8H', '12D', '3C', '8D', '1D', '5C', '10S', '11H', '12S', '4C', '6H', '12D', '12C', '13H', '12D', '9D', '3H', '13D', '8H', '3H', '5C', '2H', '1H', '3D', '10H', '2C', '5H', '13D', '7H', '5C', '9D', '2H', '2H', '7D', '5C', '3S', '2S', '9D', '11S', '8S', '9D', '11H', '5C', '9C', '4H', '3S', '6C', '1C', '8C', '8C', '11S', '6H', '2H', '9S', '8C', '10S', '4C'] 
    decks = completed_decks_in(cards)
    assert_equal(0, decks, 'You cannot build a complete deck with these cards.')
  end

  def test_deck_2
  	cards = ['4S', '9S', '5S', '13C', '7C', '9H', '13C', '11S', '13H', '4C', '5S', '3H', '9C', '9H', '6D', '3S', '11S', '13S', '8S', '6D', '5D', '2H', '11D', '2C', '10C', '13D', '1D', '12D', '5H', '5S', '1S', '13C', '5D', '9C', '8D', '7S', '1C', '7D', '13H', '3S', '9D', '13C', '9H', '10S', '8C', '12C', '7D', '10S', '9D', '10D', '9C', '13C', '7S', '2D', '10D', '10C', '11S', '2H', '1D', '5H', '7S', '13D', '6D', '4C', '4D', '5S', '11D', '12S', '13D', '13D', '1C', '6D', '9S', '2D', '3D', '1H', '11C', '9S', '11D', '8H', '10D', '7S', '9C', '4S', '11H', '7H', '9S', '2S', '6D', '10D', '11S', '6S', '3S', '1H', '11D', '10H', '10D', '9S', '12D', '11S', '6H', '7H', '5C', '9S', '13C', '8C', '4S', '7H', '7H', '11S', '4H', '5C', '3S', '10C', '1S', '11C', '11H', '3S', '2S', '8S', '9H', '2H', '13S', '3S', '1C', '7S', '1C', '13C', '2H', '9S', '10C', '10S', '9S', '8C', '6S', '5C', '10D', '7D', '9C', '8C', '10H', '7S', '3D', '13H', '7S', '3S', '5S', '6H', '7C', '5D', '3H', '13C', '8D', '4H', '2H', '2C', '12S', '13C', '5H', '4H', '9H', '7S', '13H', '9C', '9D', '8D', '6D', '1H', '8D', '4S', '4D', '7S', '5D', '2H', '8C', '11S', '9S', '1H', '13C', '1S', '12D', '3S', '7C', '10D', '3H', '6S', '6S', '6S', '1D', '12S', '11D', '2H', '2H', '10S', '4C', '8S', '1S', '6C', '13D', '7S', '2S', '2H', '6C', '12C', '11S', '4H', '5C', '13C', '9S', '10C', '10H', '12C', '11C', '7H', '11C', '5H', '5D', '5C', '10H', '5S', '2S', '11D', '7C', '7S', '2S', '10S', '9D', '10H', '1H', '8H', '10D', '1H', '11D', '2S', '6C', '9D', '3S', '3C', '5S', '8H', '5D', '9C', '2H', '12H', '4C', '9H', '11S', '11D', '12D', '7H', '13D', '3C', '13C', '2S', '4H', '2D', '7C', '1H', '6S', '10S', '9D', '11D', '9S', '12H', '12C', '3H', '5S', '13C', '13H', '12H']
  	decks = completed_decks_in(cards)
    assert_equal(2, decks, 'You can build two full decks with these cards.')
  end

  def test_deck_3
  	cards = ['13D', '6S', '13S', '6S', '10H', '1C', '11H', '9C', '12D', '9H', '13H', '2D', '13C', '9S', '2C', '1H', '4S', '5H', '8D', '10S', '8D', '11H', '12H', '12S', '6H', '12C', '1D', '3H', '10D', '6C', '11H', '7H', '6S', '3C', '7D', '13S', '2C', '2C', '7S', '6C', '6S', '13D', '12H', '2H', '10S', '5C', '8C', '9D', '12D', '7S', '10C', '1S', '11D', '13S', '8S', '10D', '1D', '12C', '1D', '5H', '1S', '4H', '4S', '12D', '5D', '9C', '2S', '7D', '10C', '5C', '4C', '9S', '8H', '1C', '2S', '1D', '12H', '5H', '8C', '9S', '6C', '13S', '1D', '11S', '13D', '1C', '13D', '12C', '9D', '4H', '1H', '1D', '10H', '12C', '8D', '12C', '6C', '10H', '12H', '10S', '2H', '10D', '8S', '8C', '2C', '10H', '8S', '10D', '9H', '4S', '4D', '13C', '11S', '12S', '13D', '2D', '3C', '5D', '3D', '11C', '6C', '2H', '3D', '13H', '8D', '4H', '4C', '12D', '8C', '5C', '11H', '5S', '7H', '9S', '7H', '11C', '1S', '3D', '10D', '4C', '6C', '7D', '12D', '4D', '10D', '2S', '6D', '12D', '12S', '1S', '10S', '2S', '5H', '9S', '3C', '3C', '12C', '6S', '5H', '1S', '4D', '2S', '3H', '11D', '11C', '7C', '2D', '2C', '12S', '13S', '10S', '9C', '5C', '3D', '12H', '13S', '11C', '9C', '10H', '1D', '9D', '2D', '13C', '13H', '2C', '10H', '7D', '2S', '9S', '3D', '2S', '3S', '10H', '1C', '10H', '7S', '10S', '7H', '8C', '9C', '4D', '10D', '10D', '7C', '1D', '12C', '8C', '6D', '10D', '1S', '5D', '13S', '8D', '12H', '3D', '7C', '8S', '7S', '4D', '9C', '11S', '1S', '12H', '6S', '6S', '12S', '13D', '8S', '5H', '6S', '12C', '3D', '6C', '6D', '2S', '13C', '9D', '8D', '3D', '7D', '12S', '11S', '9C', '10C', '2S', '1S', '5H', '1D', '8S', '4S', '8C', '11D', '3H', '9H', '2D', '7D', '11S', '9D', '6D', '12S', '2H', '3C', '5H', '1S', '8H', '2C', '2H', '1H', '1D', '7S']
  	decks = completed_decks_in(cards)
    assert_equal(1, decks, 'You can build one full deck with these cards.')
  end

  def test_deck_4
  	cards = ['1S', '2S', '3S', '4S', '5S', '6S', '7S', '8S', '9S', '10S', '11S', '12S', '13S', '1H', '2H', '3H', '4H', '5H', '6H', '7H', '8H', '9H', '10H', '11H', '12H', '13H', '1D', '2D', '3D', '4D', '5D', '6D', '7D', '8D', '9D', '10D', '11D', '12D', '13D', '1C', '2C', '3C', '4C', '5C', '6C', '7C', '8C', '9C', '10C', '11C', '12C', '13C']
  	decks = completed_decks_in(cards)
    assert_equal(1, decks, 'You can build one full deck with these cards.')
  end

  def test_deck_5
  	cards = ['5H', '1H', '13D', '3H', '5C', '7H', '1H', '13H', '8H', '1C', '3S', '8D', '10S', '1H', '1C', '5C', '7D', '6C', '2C', '7H', '9H', '4S', '3H', '1C', '10S', '13H', '10S', '12H', '4D', '8C', '8H', '10S', '12S', '13S', '8H', '12S', '5H', '2S', '1D', '4C', '5H', '1C', '5H', '10H', '8S', '5C', '5S', '10C', '10H', '10S', '10S', '7D', '2H', '13D', '4C', '1S', '3D', '6C', '1D', '11C', '4C', '10S', '8D', '6D', '12S', '6D', '11S', '5D', '7D', '1C', '12D', '9C', '11C', '5H', '10S', '10H', '9S', '1D', '8S', '9C', '10C', '13S', '1D', '2H', '3S', '6S', '11S', '8C', '13H', '2S', '3S', '6D', '10H', '13C', '3C', '13D', '12S', '8S', '10C', '9D', '5H', '12S', '2H', '11H', '4D', '8S', '10D', '1D', '8H', '8S', '5S', '6D', '13S', '12H', '6S', '13D', '4D', '12C', '1S', '7C', '7C', '1C', '3S', '13H', '4C', '5H', '9S', '4S', '11S', '3H', '10C', '5D', '6H', '5C', '3C', '2D', '12H', '12S', '10H', '13H', '6C', '8S', '6S', '6C', '10C', '11H', '7D', '7H', '9C', '11D', '1C', '9D', '3C', '2S', '12C', '10C', '10C', '5D', '11D', '13H', '10D', '3D', '11S', '2H', '7D', '5C', '13S', '8C', '1C', '4S', '10H', '8S', '10S', '11H', '3S', '5S', '11C', '6D', '12C', '6D', '1C', '6C', '12S', '2C', '11H', '13D', '10H', '12S', '6S', '1D', '7S', '1C', '12H', '1S', '4H', '9S', '7S', '11D', '11C', '4H', '6S', '5D', '3C', '12C', '8H', '1C', '8C', '13H', '4S', '7S', '10S', '5H', '12H', '13H', '13D', '11H', '12D', '9H', '1C', '10H', '2D', '13C', '12C', '7S', '11D', '3S', '3S', '6H', '12C', '5D', '1S', '2H', '3D', '2S', '4C', '8D', '1S', '10D', '11D', '4H', '8H', '5H', '6D', '2D', '12H', '8D', '3H', '10S', '12S', '8C', '12S', '8C', '7D', '5H', '8C', '3S', '4D', '2S', '1C', '1S', '6C', '13D', '3H', '7S', '8D', '1D', '8S', '13C', '13H', '9C', '2S', '8C', '12C', '1D', '6H', '3C']
  	decks = completed_decks_in(cards)
    assert_equal(2, decks, 'You can build two full decks with these cards.')
  end
end

